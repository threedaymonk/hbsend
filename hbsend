#!/usr/bin/env ruby
require "json"
require "fileutils"
require "cgi"
require "uri"
require "net/https"

class Configuration
  def initialize(path)
    @path = path
    @data = read
  end

  def [](key)
    @data[key]
  end

  def []=(key, value)
    @data[key] = value
    write(@data)
  end

private
  def read
    if File.exist?(@path)
      JSON.parse(File.read(@path))
    else
      {}
    end
  end

  def write(config)
    FileUtils.mkdir_p(File.dirname(@path))
    File.open(@path, "w") do |f|
      f << JSON.dump(config)
    end
  end
end

class API
  BASE = "https://api.hashblue.com"
  DUMMY_URL = "http://localhost:0/"

  def initialize(config)
    @config = config
  end

  def send_message(phone_number, message)
    puts message.length
    json = JSON.dump({"message" => {"phone_number" => phone_number, "content" => message}})
    response = post("/messages", {"Content-Type" => "application/json", "Authorization" => "OAuth " + access_token, "Accept" => "application/json"}, {}, json)
    puts response.body
  end

  def get_contacts
    response = get("/contacts", {"Authorization" => "OAuth " + access_token, "Accept" => "application/json"}, {})
    response.body
  end

private
  def client_id
    get_app_keys unless @config["client_id"]
    @config["client_id"]
  end

  def client_secret
    get_app_keys unless @config["client_secret"]
    @config["client_secret"]
  end

  def get_app_keys
    puts "Enter your API credentials from #{BASE}/account below."
    @config["client_id"]     = user_input("OAuth Identifier")
    @config["client_secret"] = user_input("OAuth Secret")
  end

  def user_input(prompt)
    $stderr.print "#{prompt} â†’ "
    $stderr.flush
    gets.strip
  end

  def authorize
    puts "Visit https://hashblue.com/oauth/authorize?client_id=#{client_id}&redirect_uri=#{CGI.escape(DUMMY_URL)}"
    puts "After authenticating, copy the URL, paste it here, and press Enter."
    url = user_input "URL"
    auth_code = url[/code=(\S+)/, 1]
    response = post("https://hashblue.com/oauth/access_token", {}, :client_id => client_id, :client_secret => client_secret,
                    :grant_type => "authorization_code", :code => auth_code, :redirect_uri => DUMMY_URL)
    handle_auth_response(response)
  end

  def refresh
    response = post("https://hashblue.com/oauth/access_token", {}, :client_id => client_id, :client_secret => client_secret,
                    :grant_type => "refresh_token", :refresh_token => @config["refresh_token"])
    handle_auth_response(response)
  end

  def handle_auth_response(response)
    data = JSON.parse(response.body)
    @config["access_token"]  = data["access_token"]
    @config["refresh_token"] = data["refresh_token"]
    @config["access_token_expires_at"] = Time.now.to_i + data["expires_in"] - 300
  end

  def access_token
    if @config["access_token"].nil?
      authorize
    elsif @config["access_token_expires_at"] < Time.now.to_i
      refresh
    end
    @config["access_token"]
  end

  def query_string(options)
    return "" if options.empty?
    "?" + options.map{ |kv| kv.map{ |a| CGI.escape(a.to_s) }.join("=") }.join("&")
  end

  def get(endpoint, headers, options)
    puts endpoint + query_string(options)
    p headers
    request endpoint do |http, uri|
      return http.request_get(uri.path + query_string(options), headers)
    end
  end

  def post(endpoint, headers, options, data="")
    puts endpoint + query_string(options)
    request endpoint do |http, uri|
      return http.request_post(uri.path + query_string(options), data, headers)
    end
  end

  def request(endpoint)
    unless endpoint =~ /^http/
      endpoint = BASE + endpoint
    end
    u = URI.parse(endpoint)
    http = Net::HTTP.new(u.host, u.port)
    if u.scheme == "https"
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end
    http.start do
      yield http, u
    end
  end
end

config = Configuration.new(File.join(ENV["HOME"], ".config", "hbsend"))
api = API.new(config)

number, message, = ARGV
api.send_message(number, message)
